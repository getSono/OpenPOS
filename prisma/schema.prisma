// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  pin         String
  nfcCode     String?  @unique
  role        Role     @default(CASHIER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  transactions Transaction[]
  
  @@map("users")
}

model Worker {
  id          String   @id @default(cuid())
  name        String
  pin         String
  nfcCode     String?  @unique
  isActive    Boolean  @default(true)
  currentStation String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  transactions Transaction[]
  
  @@map("workers")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?  @default("#000000")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  products Product[]
  
  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  cost        Float?   @default(0)
  sku         String?  @unique
  barcode     String?  @unique
  stock       Int      @default(0)
  minStock    Int      @default(0)
  isActive    Boolean  @default(true)
  image       String?
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  category       Category         @relation(fields: [categoryId], references: [id])
  transactionItems TransactionItem[]
  
  @@map("products")
}

model Customer {
  id          String   @id @default(cuid())
  name        String?
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  transactions Transaction[]
  
  @@map("customers")
}

model Transaction {
  id          String   @id @default(cuid())
  receiptNumber String @unique
  orderNumber Int      @unique
  subtotal    Float
  tax         Float    @default(0)
  discount    Float    @default(0)
  total       Float
  amountPaid  Float?
  changeAmount Float?   @default(0)
  paymentMethod PaymentMethod @default(CASH)
  status      TransactionStatus @default(COMPLETED)
  orderStatus OrderStatus @default(PENDING)
  notes       String?
  userId      String
  customerId  String?
  workerId    String?
  discountCodeId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User               @relation(fields: [userId], references: [id])
  customer     Customer?          @relation(fields: [customerId], references: [id])
  worker       Worker?            @relation(fields: [workerId], references: [id])
  discountCode DiscountCode?      @relation(fields: [discountCodeId], references: [id])
  items        TransactionItem[]

  @@map("transactions")
}

model TransactionItem {
  id            String @id @default(cuid())
  quantity      Int
  unitPrice     Float
  totalPrice    Float
  transactionId String
  productId     String
  
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])
  
  @@map("transaction_items")
}

model DiscountCode {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  type        DiscountType @default(PERCENTAGE)
  value       Float
  minAmount   Float?   @default(0)
  maxUses     Int?
  currentUses Int      @default(0)
  isActive    Boolean  @default(true)
  validFrom   DateTime @default(now())
  validUntil  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  transactions Transaction[]
  
  @@map("discount_codes")
}

enum Role {
  ADMIN
  MANAGER
  CASHIER
}

enum PaymentMethod {
  CASH
  CARD
  DIGITAL
  CHECK
  PAYPAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  READY
  COMPLETED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model ReceiptSettings {
  id            String   @id @default(cuid())
  businessName  String   @default("OpenPOS")
  headerText    String?
  footerText    String   @default("Thank you for shopping with us!")
  logoUrl       String?
  address       String?
  phone         String?
  email         String?
  website       String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("receipt_settings")
}